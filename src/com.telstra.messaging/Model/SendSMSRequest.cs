/* 
 * Telstra Messaging API
 *
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.telstra.messaging.Client.SwaggerDateConverter;

namespace com.telstra.messaging.Model
{
    /// <summary>
    /// SendSMSRequest
    /// </summary>
    [DataContract]
    public partial class SendSMSRequest :  IEquatable<SendSMSRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSMSRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendSMSRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSMSRequest" /> class.
        /// </summary>
        /// <param name="To">Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format. (required).</param>
        /// <param name="Body">The text body of the message. Messages longer than 160 characters will be counted as multiple messages. (required).</param>
        /// <param name="From">Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters..</param>
        /// <param name="Validity">How long the platform should attempt to deliver the message for. This period is specified in minutes from the message.</param>
        /// <param name="ScheduledDelivery">How long the platform should wait before attempting to send the message - specified in minutes..</param>
        /// <param name="NotifyURL">Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc..</param>
        /// <param name="ReplyRequest">If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented..</param>
        public SendSMSRequest(string To = default(string), string Body = default(string), string From = default(string), int? Validity = default(int?), int? ScheduledDelivery = default(int?), string NotifyURL = default(string), bool? ReplyRequest = default(bool?))
        {
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for SendSMSRequest and cannot be null");
            }
            else
            {
                this.To = new string[] { To };
            }
            // to ensure "Body" is required (not null)
            if (Body == null)
            {
                throw new InvalidDataException("Body is a required property for SendSMSRequest and cannot be null");
            }
            else
            {
                this.Body = Body;
            }
            this.From = From;
            this.Validity = Validity;
            this.ScheduledDelivery = ScheduledDelivery;
            this.NotifyURL = NotifyURL;
            this.ReplyRequest = ReplyRequest;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendSMSRequest" /> class.
        /// </summary>
        /// <param name="To">Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format. (required).</param>
        /// <param name="Body">The text body of the message. Messages longer than 160 characters will be counted as multiple messages. (required).</param>
        /// <param name="From">Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters..</param>
        /// <param name="Validity">How long the platform should attempt to deliver the message for. This period is specified in minutes from the message.</param>
        /// <param name="ScheduledDelivery">How long the platform should wait before attempting to send the message - specified in minutes..</param>
        /// <param name="NotifyURL">Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc..</param>
        /// <param name="ReplyRequest">If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented..</param>
        public SendSMSRequest(string[] To, string Body = default(string), string From = default(string), int? Validity = default(int?), int? ScheduledDelivery = default(int?), string NotifyURL = default(string), bool? ReplyRequest = default(bool?))
        {
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for SendSMSRequest and cannot be null");
            }
            else
            {
                this.To = To;
            }
            // to ensure "Body" is required (not null)
            if (Body == null)
            {
                throw new InvalidDataException("Body is a required property for SendSMSRequest and cannot be null");
            }
            else
            {
                this.Body = Body;
            }
            this.From = From;
            this.Validity = Validity;
            this.ScheduledDelivery = ScheduledDelivery;
            this.NotifyURL = NotifyURL;
            this.ReplyRequest = ReplyRequest;
        }

        /// <summary>
        /// Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format.
        /// </summary>
        /// <value>Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string[] To { get; private set; }

        /// <summary>
        /// The text body of the message. Messages longer than 160 characters will be counted as multiple messages.
        /// </summary>
        /// <value>The text body of the message. Messages longer than 160 characters will be counted as multiple messages.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters.
        /// </summary>
        /// <value>Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// How long the platform should attempt to deliver the message for. This period is specified in minutes from the message
        /// </summary>
        /// <value>How long the platform should attempt to deliver the message for. This period is specified in minutes from the message</value>
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public int? Validity { get; set; }

        /// <summary>
        /// How long the platform should wait before attempting to send the message - specified in minutes.
        /// </summary>
        /// <value>How long the platform should wait before attempting to send the message - specified in minutes.</value>
        [DataMember(Name="scheduledDelivery", EmitDefaultValue=false)]
        public int? ScheduledDelivery { get; set; }

        /// <summary>
        /// Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc.
        /// </summary>
        /// <value>Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc.</value>
        [DataMember(Name="notifyURL", EmitDefaultValue=false)]
        public string NotifyURL { get; set; }

        /// <summary>
        /// If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented.
        /// </summary>
        /// <value>If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented.</value>
        [DataMember(Name="replyRequest", EmitDefaultValue=false)]
        public bool? ReplyRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendSMSRequest {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  ScheduledDelivery: ").Append(ScheduledDelivery).Append("\n");
            sb.Append("  NotifyURL: ").Append(NotifyURL).Append("\n");
            sb.Append("  ReplyRequest: ").Append(ReplyRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendSMSRequest);
        }

        /// <summary>
        /// Returns true if SendSMSRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendSMSRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendSMSRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Validity == input.Validity ||
                    (this.Validity != null &&
                    this.Validity.Equals(input.Validity))
                ) && 
                (
                    this.ScheduledDelivery == input.ScheduledDelivery ||
                    (this.ScheduledDelivery != null &&
                    this.ScheduledDelivery.Equals(input.ScheduledDelivery))
                ) && 
                (
                    this.NotifyURL == input.NotifyURL ||
                    (this.NotifyURL != null &&
                    this.NotifyURL.Equals(input.NotifyURL))
                ) && 
                (
                    this.ReplyRequest == input.ReplyRequest ||
                    (this.ReplyRequest != null &&
                    this.ReplyRequest.Equals(input.ReplyRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Validity != null)
                    hashCode = hashCode * 59 + this.Validity.GetHashCode();
                if (this.ScheduledDelivery != null)
                    hashCode = hashCode * 59 + this.ScheduledDelivery.GetHashCode();
                if (this.NotifyURL != null)
                    hashCode = hashCode * 59 + this.NotifyURL.GetHashCode();
                if (this.ReplyRequest != null)
                    hashCode = hashCode * 59 + this.ReplyRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
